# Encoding: utf-8
#
# This is auto-generated code, changes will be overwritten.
#
# Copyright:: Copyright 2015, Google Inc. All Rights Reserved.
# License:: Licensed under the Apache License, Version 2.0.
#
# Code generated by AdsCommon library 0.9.9 on 2022-05-10 10:09:54.

require 'ads_common/savon_service'
require 'bing_ads_api/v13/campaign_management_service_registry'

module BingAdsApi; module V13; module CampaignManagementService
  class CampaignManagementService < AdsCommon::SavonService
    def initialize(config, endpoint)
      namespace = 'https://bingads.microsoft.com/CampaignManagement/v13'
      super(config, endpoint, namespace, :v13)
    end

    def add_campaigns(*args, &block)
      return execute_action('add_campaigns', args, &block)
    end

    def get_campaigns_by_account_id(*args, &block)
      return execute_action('get_campaigns_by_account_id', args, &block)
    end

    def get_campaigns_by_ids(*args, &block)
      return execute_action('get_campaigns_by_ids', args, &block)
    end

    def delete_campaigns(*args, &block)
      return execute_action('delete_campaigns', args, &block)
    end

    def update_campaigns(*args, &block)
      return execute_action('update_campaigns', args, &block)
    end

    def get_negative_sites_by_campaign_ids(*args, &block)
      return execute_action('get_negative_sites_by_campaign_ids', args, &block)
    end

    def set_negative_sites_to_campaigns(*args, &block)
      return execute_action('set_negative_sites_to_campaigns', args, &block)
    end

    def get_config_value(*args, &block)
      return execute_action('get_config_value', args, &block)
    end

    def get_bsc_countries(*args, &block)
      return execute_action('get_bsc_countries', args, &block)
    end

    def add_ad_groups(*args, &block)
      return execute_action('add_ad_groups', args, &block)
    end

    def delete_ad_groups(*args, &block)
      return execute_action('delete_ad_groups', args, &block)
    end

    def get_ad_groups_by_ids(*args, &block)
      return execute_action('get_ad_groups_by_ids', args, &block)
    end

    def get_ad_groups_by_campaign_id(*args, &block)
      return execute_action('get_ad_groups_by_campaign_id', args, &block)
    end

    def update_ad_groups(*args, &block)
      return execute_action('update_ad_groups', args, &block)
    end

    def get_negative_sites_by_ad_group_ids(*args, &block)
      return execute_action('get_negative_sites_by_ad_group_ids', args, &block)
    end

    def set_negative_sites_to_ad_groups(*args, &block)
      return execute_action('set_negative_sites_to_ad_groups', args, &block)
    end

    def get_geo_locations_file_url(*args, &block)
      return execute_action('get_geo_locations_file_url', args, &block)
    end

    def add_ads(*args, &block)
      return execute_action('add_ads', args, &block)
    end

    def delete_ads(*args, &block)
      return execute_action('delete_ads', args, &block)
    end

    def get_ads_by_editorial_status(*args, &block)
      return execute_action('get_ads_by_editorial_status', args, &block)
    end

    def get_ads_by_ids(*args, &block)
      return execute_action('get_ads_by_ids', args, &block)
    end

    def get_ads_by_ad_group_id(*args, &block)
      return execute_action('get_ads_by_ad_group_id', args, &block)
    end

    def update_ads(*args, &block)
      return execute_action('update_ads', args, &block)
    end

    def add_keywords(*args, &block)
      return execute_action('add_keywords', args, &block)
    end

    def delete_keywords(*args, &block)
      return execute_action('delete_keywords', args, &block)
    end

    def get_keywords_by_editorial_status(*args, &block)
      return execute_action('get_keywords_by_editorial_status', args, &block)
    end

    def get_keywords_by_ids(*args, &block)
      return execute_action('get_keywords_by_ids', args, &block)
    end

    def get_keywords_by_ad_group_id(*args, &block)
      return execute_action('get_keywords_by_ad_group_id', args, &block)
    end

    def update_keywords(*args, &block)
      return execute_action('update_keywords', args, &block)
    end

    def appeal_editorial_rejections(*args, &block)
      return execute_action('appeal_editorial_rejections', args, &block)
    end

    def get_editorial_reasons_by_ids(*args, &block)
      return execute_action('get_editorial_reasons_by_ids', args, &block)
    end

    def get_account_migration_statuses(*args, &block)
      return execute_action('get_account_migration_statuses', args, &block)
    end

    def set_account_properties(*args, &block)
      return execute_action('set_account_properties', args, &block)
    end

    def get_account_properties(*args, &block)
      return execute_action('get_account_properties', args, &block)
    end

    def add_ad_extensions(*args, &block)
      return execute_action('add_ad_extensions', args, &block)
    end

    def get_ad_extensions_by_ids(*args, &block)
      return execute_action('get_ad_extensions_by_ids', args, &block)
    end

    def update_ad_extensions(*args, &block)
      return execute_action('update_ad_extensions', args, &block)
    end

    def delete_ad_extensions(*args, &block)
      return execute_action('delete_ad_extensions', args, &block)
    end

    def get_ad_extensions_editorial_reasons(*args, &block)
      return execute_action('get_ad_extensions_editorial_reasons', args, &block)
    end

    def set_ad_extensions_associations(*args, &block)
      return execute_action('set_ad_extensions_associations', args, &block)
    end

    def get_ad_extensions_associations(*args, &block)
      return execute_action('get_ad_extensions_associations', args, &block)
    end

    def delete_ad_extensions_associations(*args, &block)
      return execute_action('delete_ad_extensions_associations', args, &block)
    end

    def get_ad_extension_ids_by_account_id(*args, &block)
      return execute_action('get_ad_extension_ids_by_account_id', args, &block)
    end

    def add_media(*args, &block)
      return execute_action('add_media', args, &block)
    end

    def delete_media(*args, &block)
      return execute_action('delete_media', args, &block)
    end

    def get_media_meta_data_by_account_id(*args, &block)
      return execute_action('get_media_meta_data_by_account_id', args, &block)
    end

    def get_media_meta_data_by_ids(*args, &block)
      return execute_action('get_media_meta_data_by_ids', args, &block)
    end

    def get_media_associations(*args, &block)
      return execute_action('get_media_associations', args, &block)
    end

    def get_ad_group_criterions_by_ids(*args, &block)
      return execute_action('get_ad_group_criterions_by_ids', args, &block)
    end

    def add_ad_group_criterions(*args, &block)
      return execute_action('add_ad_group_criterions', args, &block)
    end

    def update_ad_group_criterions(*args, &block)
      return execute_action('update_ad_group_criterions', args, &block)
    end

    def delete_ad_group_criterions(*args, &block)
      return execute_action('delete_ad_group_criterions', args, &block)
    end

    def apply_product_partition_actions(*args, &block)
      return execute_action('apply_product_partition_actions', args, &block)
    end

    def get_bmc_stores_by_customer_id(*args, &block)
      return execute_action('get_bmc_stores_by_customer_id', args, &block)
    end

    def add_negative_keywords_to_entities(*args, &block)
      return execute_action('add_negative_keywords_to_entities', args, &block)
    end

    def get_negative_keywords_by_entity_ids(*args, &block)
      return execute_action('get_negative_keywords_by_entity_ids', args, &block)
    end

    def delete_negative_keywords_from_entities(*args, &block)
      return execute_action('delete_negative_keywords_from_entities', args, &block)
    end

    def get_shared_entities_by_account_id(*args, &block)
      return execute_action('get_shared_entities_by_account_id', args, &block)
    end

    def get_shared_entities(*args, &block)
      return execute_action('get_shared_entities', args, &block)
    end

    def add_shared_entity(*args, &block)
      return execute_action('add_shared_entity', args, &block)
    end

    def get_list_items_by_shared_list(*args, &block)
      return execute_action('get_list_items_by_shared_list', args, &block)
    end

    def add_list_items_to_shared_list(*args, &block)
      return execute_action('add_list_items_to_shared_list', args, &block)
    end

    def update_shared_entities(*args, &block)
      return execute_action('update_shared_entities', args, &block)
    end

    def delete_list_items_from_shared_list(*args, &block)
      return execute_action('delete_list_items_from_shared_list', args, &block)
    end

    def set_shared_entity_associations(*args, &block)
      return execute_action('set_shared_entity_associations', args, &block)
    end

    def delete_shared_entity_associations(*args, &block)
      return execute_action('delete_shared_entity_associations', args, &block)
    end

    def get_shared_entity_associations_by_shared_entity_ids(*args, &block)
      return execute_action('get_shared_entity_associations_by_shared_entity_ids', args, &block)
    end

    def get_shared_entity_associations_by_entity_ids(*args, &block)
      return execute_action('get_shared_entity_associations_by_entity_ids', args, &block)
    end

    def delete_shared_entities(*args, &block)
      return execute_action('delete_shared_entities', args, &block)
    end

    def get_campaign_sizes_by_account_id(*args, &block)
      return execute_action('get_campaign_sizes_by_account_id', args, &block)
    end

    def add_campaign_criterions(*args, &block)
      return execute_action('add_campaign_criterions', args, &block)
    end

    def update_campaign_criterions(*args, &block)
      return execute_action('update_campaign_criterions', args, &block)
    end

    def delete_campaign_criterions(*args, &block)
      return execute_action('delete_campaign_criterions', args, &block)
    end

    def get_campaign_criterions_by_ids(*args, &block)
      return execute_action('get_campaign_criterions_by_ids', args, &block)
    end

    def add_budgets(*args, &block)
      return execute_action('add_budgets', args, &block)
    end

    def update_budgets(*args, &block)
      return execute_action('update_budgets', args, &block)
    end

    def delete_budgets(*args, &block)
      return execute_action('delete_budgets', args, &block)
    end

    def get_budgets_by_ids(*args, &block)
      return execute_action('get_budgets_by_ids', args, &block)
    end

    def get_campaign_ids_by_budget_ids(*args, &block)
      return execute_action('get_campaign_ids_by_budget_ids', args, &block)
    end

    def add_bid_strategies(*args, &block)
      return execute_action('add_bid_strategies', args, &block)
    end

    def update_bid_strategies(*args, &block)
      return execute_action('update_bid_strategies', args, &block)
    end

    def delete_bid_strategies(*args, &block)
      return execute_action('delete_bid_strategies', args, &block)
    end

    def get_bid_strategies_by_ids(*args, &block)
      return execute_action('get_bid_strategies_by_ids', args, &block)
    end

    def get_campaign_ids_by_bid_strategy_ids(*args, &block)
      return execute_action('get_campaign_ids_by_bid_strategy_ids', args, &block)
    end

    def add_audiences(*args, &block)
      return execute_action('add_audiences', args, &block)
    end

    def update_audiences(*args, &block)
      return execute_action('update_audiences', args, &block)
    end

    def delete_audiences(*args, &block)
      return execute_action('delete_audiences', args, &block)
    end

    def get_audiences_by_ids(*args, &block)
      return execute_action('get_audiences_by_ids', args, &block)
    end

    def get_uet_tags_by_ids(*args, &block)
      return execute_action('get_uet_tags_by_ids', args, &block)
    end

    def add_uet_tags(*args, &block)
      return execute_action('add_uet_tags', args, &block)
    end

    def update_uet_tags(*args, &block)
      return execute_action('update_uet_tags', args, &block)
    end

    def get_conversion_goals_by_ids(*args, &block)
      return execute_action('get_conversion_goals_by_ids', args, &block)
    end

    def get_conversion_goals_by_tag_ids(*args, &block)
      return execute_action('get_conversion_goals_by_tag_ids', args, &block)
    end

    def add_conversion_goals(*args, &block)
      return execute_action('add_conversion_goals', args, &block)
    end

    def update_conversion_goals(*args, &block)
      return execute_action('update_conversion_goals', args, &block)
    end

    def apply_offline_conversions(*args, &block)
      return execute_action('apply_offline_conversions', args, &block)
    end

    def apply_offline_conversion_adjustments(*args, &block)
      return execute_action('apply_offline_conversion_adjustments', args, &block)
    end

    def add_labels(*args, &block)
      return execute_action('add_labels', args, &block)
    end

    def delete_labels(*args, &block)
      return execute_action('delete_labels', args, &block)
    end

    def update_labels(*args, &block)
      return execute_action('update_labels', args, &block)
    end

    def get_labels_by_ids(*args, &block)
      return execute_action('get_labels_by_ids', args, &block)
    end

    def set_label_associations(*args, &block)
      return execute_action('set_label_associations', args, &block)
    end

    def delete_label_associations(*args, &block)
      return execute_action('delete_label_associations', args, &block)
    end

    def get_label_associations_by_entity_ids(*args, &block)
      return execute_action('get_label_associations_by_entity_ids', args, &block)
    end

    def get_label_associations_by_label_ids(*args, &block)
      return execute_action('get_label_associations_by_label_ids', args, &block)
    end

    def add_experiments(*args, &block)
      return execute_action('add_experiments', args, &block)
    end

    def delete_experiments(*args, &block)
      return execute_action('delete_experiments', args, &block)
    end

    def update_experiments(*args, &block)
      return execute_action('update_experiments', args, &block)
    end

    def get_experiments_by_ids(*args, &block)
      return execute_action('get_experiments_by_ids', args, &block)
    end

    def get_profile_data_file_url(*args, &block)
      return execute_action('get_profile_data_file_url', args, &block)
    end

    def search_companies(*args, &block)
      return execute_action('search_companies', args, &block)
    end

    def get_file_import_upload_url(*args, &block)
      return execute_action('get_file_import_upload_url', args, &block)
    end

    def add_import_jobs(*args, &block)
      return execute_action('add_import_jobs', args, &block)
    end

    def get_import_results(*args, &block)
      return execute_action('get_import_results', args, &block)
    end

    def get_import_jobs_by_ids(*args, &block)
      return execute_action('get_import_jobs_by_ids', args, &block)
    end

    def delete_import_jobs(*args, &block)
      return execute_action('delete_import_jobs', args, &block)
    end

    def get_import_entity_ids_mapping(*args, &block)
      return execute_action('get_import_entity_ids_mapping', args, &block)
    end

    def update_import_jobs(*args, &block)
      return execute_action('update_import_jobs', args, &block)
    end

    def add_videos(*args, &block)
      return execute_action('add_videos', args, &block)
    end

    def delete_videos(*args, &block)
      return execute_action('delete_videos', args, &block)
    end

    def get_videos_by_ids(*args, &block)
      return execute_action('get_videos_by_ids', args, &block)
    end

    def update_videos(*args, &block)
      return execute_action('update_videos', args, &block)
    end

    def add_campaign_conversion_goals(*args, &block)
      return execute_action('add_campaign_conversion_goals', args, &block)
    end

    def delete_campaign_conversion_goals(*args, &block)
      return execute_action('delete_campaign_conversion_goals', args, &block)
    end

    private

    def get_service_registry()
      return CampaignManagementServiceRegistry
    end

    def get_module()
      return BingAdsApi::V13::CampaignManagementService
    end
  end
end; end; end
